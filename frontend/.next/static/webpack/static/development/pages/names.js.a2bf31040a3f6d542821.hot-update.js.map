{"version":3,"file":"static/webpack/static/development/pages/names.js.a2bf31040a3f6d542821.hot-update.js","sources":["webpack:///./components/InnerNames.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { _onShareClick, _addHighlightClass } from \"./helpers\";\n\nconst OuterWrap = styled.div`\n  overflow: hidden;\n  padding-top: 40vh;\n`;\n\n// TODO: figure out why mouseMove is causing this component to rerender\n\nclass InnerNames extends React.PureComponent {\n  state = {\n    copied: false\n  };\n\n  _renderNamesWithId = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        const personId = encodeURI(woman);\n        return (\n          <div\n            data-scrollid={personId}\n            data-nameid={personId}\n            className={\n              highlightedid === personId\n                ? `womanItem ${personId} ${highlightedid} highlighted`\n                : `womanItem ${personId}`\n            }\n            key={woman.id + personId + index}\n            onClick={e => _addHighlightClass(e)}\n          >\n            <span className=\"inner-relative\">\n              <CopyToClipboard\n                text={`${window.location.host}/names#${personId}`}\n                onCopy={() => this.setState({ copied: true })}\n              >\n                <span className=\"super-cta\">\n                  {this.state.copied ? \"Copied to clipboard\" : \"Share\"}\n                </span>\n              </CopyToClipboard>\n\n              <h1>{woman}</h1>\n            </span>\n          </div>\n        );\n      });\n    }\n  };\n\n  _renderNames = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        const personId = encodeURI(woman);\n\n        return (\n          <div\n            data-nameid={personId}\n            className={\n              highlightedid === personId\n                ? `womanItem ${personId} ${highlightedid} highlighted`\n                : `womanItem ${personId}`\n            }\n            key={woman.id + personId + index}\n            onClick={e => _addHighlightClass(e)}\n          >\n            <span className=\"inner-relative\">\n              <CopyToClipboard\n                text={`http://localhost:7777/names#${personId}`}\n                onCopy={() => this.setState({ copied: true })}\n              >\n                <span className=\"super-cta\">\n                  {this.state.copied ? \"Copied to clipboard\" : \"Share\"}\n                </span>\n              </CopyToClipboard>\n\n              <h1>{woman}</h1>\n            </span>\n          </div>\n        );\n      });\n    }\n  };\n\n  render() {\n    return (\n      <OuterWrap>\n        {this.props.renderwithid\n          ? this._renderNamesWithId(this.props.names, this.props.highlightedid)\n          : this._renderNames(this.props.names, this.props.highlightedid)}\n      </OuterWrap>\n    );\n  }\n}\n\nexport default InnerNames;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAMA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAjFA;AACA;AAmFA;;;;A","sourceRoot":""}