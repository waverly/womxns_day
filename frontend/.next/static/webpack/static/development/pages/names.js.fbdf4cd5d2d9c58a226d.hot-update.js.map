{"version":3,"file":"static/webpack/static/development/pages/names.js.fbdf4cd5d2d9c58a226d.hot-update.js","sources":["webpack:///./components/InnerNames.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { genId, _onShareClick, _addHighlightClass } from \"./helpers\";\nimport { frontend } from \"../config\";\n\nconst OuterWrap = styled.div`\n  overflow: hidden;\n  padding-top: 40vh;\n`;\n\nclass InnerNames extends React.PureComponent {\n  state = {\n    copied: false,\n    width: 0\n  };\n\n  componentDidMount() {\n    if (typeof window === \"undefined\") {\n      return 0;\n    } else if (typeof window != \"undefined\") {\n      this.setState({ width: window.innerWidth });\n    }\n  }\n\n  _renderNamesWithId = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        const personId = genId(woman);\n        return (\n          <div\n            data-scrollid={personId}\n            data-nameid={personId}\n            className={\n              highlightedid === personId\n                ? `womanItem ${personId} ${highlightedid} highlighted`\n                : `womanItem ${personId}`\n            }\n            key={woman.id + personId + index}\n            onClick={e => _addHighlightClass(e)}\n          >\n            <span className=\"inner-relative\">\n              <CopyToClipboard\n                text={`${frontend}/names#${personId}`}\n                onCopy={() => this.props.setCopied(personId)}\n              >\n                <span className=\"super-cta\">\n                  {this.props.copied[personId]\n                    ? \"Copied to clipboard\"\n                    : \"Share\"}\n                </span>\n              </CopyToClipboard>\n\n              <h1>{woman}</h1>\n            </span>\n          </div>\n        );\n      });\n    }\n  };\n\n  _renderNames = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        const personId = genId(woman);\n\n        return (\n          <div\n            data-nameid={personId}\n            className={\n              this.props.copied[personId]\n                ? `womanItem ${personId} ${highlightedid} highlighted`\n                : `womanItem ${personId}`\n            }\n            key={woman.id + personId + index}\n            onClick={e => _addHighlightClass(e)}\n          >\n            <span className=\"inner-relative\">\n              <CopyToClipboard\n                text={`${frontend}/names#${personId}`}\n                onCopy={() => this.props.setCopied(personId)}\n              >\n                <span className=\"super-cta\">\n                  {this.props.copied[personId]\n                    ? \"Copied to clipboard\"\n                    : \"Share\"}\n                </span>\n              </CopyToClipboard>\n\n              <h1>{woman}</h1>\n            </span>\n          </div>\n        );\n      });\n    }\n  };\n\n  _mobileRenderNamesWithId = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        if (index < 50) {\n          const personId = genId(woman);\n          return (\n            <div\n              data-scrollid={personId}\n              data-nameid={personId}\n              className={\n                highlightedid === personId\n                  ? `womanItem ${personId} ${highlightedid} highlighted`\n                  : `womanItem ${personId}`\n              }\n              key={woman.id + personId + index}\n              onClick={e => _addHighlightClass(e)}\n            >\n              <span className=\"inner-relative\">\n                <CopyToClipboard\n                  text={`${frontend}/names#${personId}`}\n                  onCopy={() => this.props.setCopied(personId)}\n                >\n                  <span className=\"super-cta\">\n                    {this.props.copied[personId]\n                      ? \"Copied to clipboard\"\n                      : \"Share\"}\n                  </span>\n                </CopyToClipboard>\n\n                <h1>{woman}</h1>\n              </span>\n            </div>\n          );\n        }\n      });\n    }\n  };\n\n  _mobileRenderNames = (names, highlightedid) => {\n    if (names) {\n      return names.map((woman, index) => {\n        if (index < 50) {\n          const personId = genId(woman);\n\n          return (\n            <div\n              data-nameid={personId}\n              className={\n                this.props.copied[personId]\n                  ? `womanItem ${personId} ${highlightedid} highlighted`\n                  : `womanItem ${personId}`\n              }\n              key={woman.id + personId + index}\n              onClick={e => _addHighlightClass(e)}\n            >\n              <span className=\"inner-relative\">\n                <CopyToClipboard\n                  text={`${frontend}/names#${personId}`}\n                  onCopy={() => this.props.setCopied(personId)}\n                >\n                  <span className=\"super-cta\">\n                    {this.props.copied[personId]\n                      ? \"Copied to clipboard\"\n                      : \"Share\"}\n                  </span>\n                </CopyToClipboard>\n\n                <h1>{woman}</h1>\n              </span>\n            </div>\n          );\n        }\n      });\n    }\n  };\n\n  render() {\n    console.log(this.w);\n    if (this.state.width > 768) {\n      return (\n        <OuterWrap>\n          {this.props.renderwithid\n            ? this._renderNamesWithId(\n                this.props.names,\n                this.props.highlightedid\n              )\n            : this._renderNames(this.props.names, this.props.highlightedid)}\n        </OuterWrap>\n      );\n    } else {\n      return (\n        <OuterWrap>\n          {this.props.renderwithid\n            ? this._mobileRenderNamesWithId(\n                this.props.names,\n                this.props.highlightedid\n              )\n            : this._mobileRenderNames(\n                this.props.names,\n                this.props.highlightedid\n              )}\n        </OuterWrap>\n      );\n    }\n  }\n}\n\nexport default InnerNames;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;;;;AA3JA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAsJA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;AA9LA;AACA;AAgMA;;;;A","sourceRoot":""}