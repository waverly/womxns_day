type Mutation {
  createWoman(data: WomanCreateInput!): Woman!
  updateWoman(data: WomanUpdateInput!, where: WomanWhereUniqueInput!): Woman
  deleteWoman(where: WomanWhereUniqueInput!): Woman
  upsertWoman(where: WomanWhereUniqueInput!, create: WomanCreateInput!, update: WomanUpdateInput!): Woman!
  updateManyWomen(data: WomanUpdateManyMutationInput!, where: WomanWhereInput): BatchPayload!
  deleteManyWomen(where: WomanWhereInput): BatchPayload!
}

type Query {
  women(where: WomanWhereInput, orderBy: WomanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Woman]!
  woman(where: WomanWhereUniqueInput!): Woman
  womenConnection(where: WomanWhereInput, orderBy: WomanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WomanConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  woman(where: WomanSubscriptionWhereInput): WomanSubscriptionPayload
}

type AggregateWoman {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Woman implements Node {
  id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
}

"""
A connection to a list of items.
"""
type WomanConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WomanEdge]!
  aggregate: AggregateWoman!
}

input WomanCreateInput {
  name: String!
  slug: String!
}

"""
An edge in a connection.
"""
type WomanEdge {
  """
  The item at the end of the edge.
  """
  node: Woman!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WomanOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WomanPreviousValues {
  id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
}

type WomanSubscriptionPayload {
  mutation: MutationType!
  node: Woman
  updatedFields: [String!]
  previousValues: WomanPreviousValues
}

input WomanSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WomanSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WomanSubscriptionWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WomanSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WomanWhereInput
}

input WomanUpdateInput {
  name: String
  slug: String
}

input WomanUpdateManyMutationInput {
  name: String
  slug: String
}

input WomanWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WomanWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WomanWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WomanWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  slug: String
  """
  All values that are not equal to given value.
  """
  slug_not: String
  """
  All values that are contained in given list.
  """
  slug_in: [String!]
  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]
  """
  All values less than the given value.
  """
  slug_lt: String
  """
  All values less than or equal the given value.
  """
  slug_lte: String
  """
  All values greater than the given value.
  """
  slug_gt: String
  """
  All values greater than or equal the given value.
  """
  slug_gte: String
  """
  All values containing the given string.
  """
  slug_contains: String
  """
  All values not containing the given string.
  """
  slug_not_contains: String
  """
  All values starting with the given string.
  """
  slug_starts_with: String
  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String
  """
  All values ending with the given string.
  """
  slug_ends_with: String
  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
}

input WomanWhereUniqueInput {
  id: ID
}
